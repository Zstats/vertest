setwd("D:/BaiduNetdiskWorkspace/公众号/shiny平台/R包/基础包/一机一码R包-base")
devtools::build(binary = TRUE, args = c('--no-test-load'))
install.packages("D:/BaiduNetdiskWorkspace/公众号/shiny平台/R包/基础包/zstats1_0.0.0.9000.zip", repos = NULL, type = "win.binary")
library(zstats1)
.libPaths()
setwd("D:/BaiduNetdiskWorkspace/公众号/shiny平台/R包/ZGBD一机一码")
# compile.R
library(openssl)
# 解析R文件为表达式列表并编译为字节码
exprs <- parse("R/GBDread.R")
compiled_list <- lapply(exprs, compiler::compile)
# 设置加密密钥和初始向量（在实际使用中应该安全存储，不要硬编码）
key <- charToRaw("1234567890abcdef1234567890abcdef")  # 32字节
iv <- openssl::rand_bytes(16)  # 16字节初始化向量
# 序列化为原始二进制数据
serialized_data <- serialize(compiled_list, NULL)
# AES-CBC加密
encrypted_data <- openssl::aes_cbc_encrypt(serialized_data, key = key, iv = iv)
# 创建包含IV和加密数据的完整二进制文件
# 将IV和加密数据拼接起来，以便解密时可以提取
full_data <- c(iv, encrypted_data)
writeBin(full_data, "inst/bytecode/GBDread.enc")
# 保存测试版未加密文件（开发阶段用，最终可移除）
# saveRDS(compiled_list, "inst/bytecode/utilsList.rds")
cat("字节码已编译并加密\n")
setwd("D:/BaiduNetdiskWorkspace/公众号/shiny平台/R包/ZGBD一机一码")
devtools::build(binary = TRUE, args = c('--no-test-load'))
.libPaths()
devtools::build(binary = TRUE, args = c('--no-test-load'))
install.packages(c('do', 'ggpmisc', 'RStata', 'sf', 'BAPC', 'INLA', 'snowfall', 'colorfindr', 'configr', 'fanplot', 'etm', 'epitools', 'tidytable'))
devtools::build(binary = TRUE, args = c('--no-test-load'))
devtools::build(binary = TRUE, args = c('--no-test-load'))
devtools::build(binary = TRUE, args = c('--no-test-load'))
install.packages("BAPC", repos="http://R-Forge.R-project.org")
install.packages("cmprsk")
install.packages("BAPC", repos="http://R-Forge.R-project.org")
repos = c(getOption("repos"), INLA = "https://inla.r-inla-download.org/R/testing"), dep = TRUE)
remotes::install_version("INLA", version = "24.05.10",
repos = c(getOption("repos"), INLA = "https://inla.r-inla-download.org/R/testing"), dep = TRUE)
install.packages("C:/Users/56277/Desktop/INLA_24.05.10.zip", repos = NULL, type = "win.binary")
library(INLA)
install.packages("fmesher")
remove.packages("fmesher")
install.packages("fmesher")
install.packages("fmesher")
library(INLA)
install.packages("fmesher")
install.packages("fmesher")
library(INLA)
detach("package:INLA", unload = TRUE)
library(fmesher)
library(INLA)
setwd("D:/BaiduNetdiskWorkspace/公众号/shiny平台/R包/ZGBD一机一码")
devtools::build(binary = TRUE, args = c('--no-test-load'))
install.packages("writexl")
devtools::build(binary = TRUE, args = c('--no-test-load'))
install.packages("FactoMineR")
devtools::build(binary = TRUE, args = c('--no-test-load'))
devtools::build(binary = TRUE, args = c('--no-test-load'))
setwd("D:/BaiduNetdiskWorkspace/公众号/shiny平台/R包/github_push/vertest1")
devtools::build(binary = TRUE, args = c('--no-test-load'))
devtools::build(binary = TRUE, args = c('--no-test-load'))
setwd("D:/BaiduNetdiskWorkspace/公众号/shiny平台/R包/github_push/vertest")
devtools::build(binary = TRUE, args = c('--no-test-load'))
devtools::install_github("Zstats/vertest")
remove.packages("zstats1")
