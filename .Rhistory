beta<-0.2
p1<-0.7
p2<-0.3
p<(p1+p2)/2
sd<-sqrt(p*(1-p))
TwoSampleSeqCrossOver.NIS(a,beta,sd,2,0.15,0.4)
sd
beta<-0.2
#率差标准差
TwoSampleSeqCrossOver.NIS(a,beta,sd,2,0.15,0.4)
a<-0.05
#第二类错误
beta<-0.2
#率差标准差
p1<-0.7
p2<-0.3
p<(p1+p2)/2
sd<-sqrt(p*(1-p))
#用药顺序组
g<-2
#率差
pd<-p1-p2
#界值
de<-0.15
#样本量计算
TwoSampleSeqCrossOver.NIS(a,beta,sd,g,de,pd)
#第一类错误a=0.05
a<-0.05
#第二类错误
beta<-0.2
#率差标准差
p1<-0.7
p2<-0.3
p<(p1+p2)/2
sd<-sqrt(p*(1-p))
#用药顺序组
g<-2
#率差
pd<-p1-p2
#界值
de<-0.15
TwoSampleSeqCrossOver.NIS(a,beta,0.5,g,-0.2,0)
TwoSampleSeqCrossOver.NIS(a,beta,0.5,g,0.2,0)
a<-0.025
TwoSampleSeqCrossOver.NIS(a,beta,0.5,g,0.2,0)
a<-0.05
beta<-0.1
TwoSampleSeqCrossOver.NIS(a,beta,0.5,g,0.2,0)
beta<-0.2
TwoSampleSeqCrossOver.NIS(a,beta,0.5,g,0.2,0)
p1<-0.7
p2<-0.3
sigma<-sqrt(p1*(1-p1)+p2*(1-p2))
sigma
library(TwoSampleMR)
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh37")
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh37")
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh37")
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh37")
library(BiocManager)
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh37")
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh37")
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh37")
install.packages("MungeSumstats")
install.packages("MungeSumstats")
library(MungeSumstats)
BiocManager::install.packages("MungeSumstats")
BiocManager::install("MungeSumstats")
library(MungeSumstats)
install.packages("DelayedArray")
BiocManager::install("DelayedArray")
library(MungeSumstats)
library(MungeSumstats)
BiocManager::install("DelayedArray")
BiocManager::install("MungeSumstats")
library(MungeSumstats)
BiocManager::install("DelayedArray")
library(SNPlocs.Hsapiens.dbSNP155.GRCh37)
library(SNPlocs.Hsapiens.dbSNP155.GRCh37)
BiocManager::install("SNPlocs.Hsapiens.dbSNP155.GRCh37")
library(SNPlocs.Hsapiens.dbSNP155.GRCh37)
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")
BiocManager::install("SNPlocs.Hsapiens.dbSNP144.GRCh37")
install.packages("C:/Users/56277/Desktop/SNPlocs.Hsapiens.dbSNP144.GRCh37_0.99.20.tar.gz", repos = NULL, type = "source")
install.packages("DelayedArray")
install.packages("C:/Users/56277/Desktop/SNPlocs.Hsapiens.dbSNP144.GRCh37_0.99.20.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/56277/Desktop/SNPlocs.Hsapiens.dbSNP144.GRCh37_0.99.20.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/56277/Desktop/SNPlocs.Hsapiens.dbSNP144.GRCh37_0.99.20.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/56277/Desktop/SNPlocs.Hsapiens.dbSNP144.GRCh37_0.99.20.tar.gz", repos = NULL, type = "source")
install.packages("C:/Program Files/R/R-4.3.1/SNPlocs.Hsapiens.dbSNP144.GRCh37_0.99.20.tar.gz", repos = NULL, type = "source")
if (!require("BiocManager")) install.packages("BiocManager")
BiocManager::install("MungeSumstats")
install.packages("foreign")
install.packages("foreign")
install.packages("KernSmooth")
install.packages("foreign")
install.packages("foreign")
install.packages("foreign")
install.packages("foreign")
if (!require("BiocManager")) install.packages("BiocManager")
BiocManager::install("MungeSumstats")
if (!require("BiocManager")) install.packages("BiocManager")
BiocManager::install("MungeSumstats")
install.packages("boot")
BiocManager::install("MungeSumstats")
library(MungeSumstats)
install.packages("DelayedArray")
eduAttainOkbayPth <- system.file("extdata", "eduAttainOkbay.txt",
package = "MungeSumstats"
)
is_32bit_windows <-
.Platform$OS.type == "windows" && .Platform$r_arch == "i386"
if (!is_32bit_windows) {
reformatted <- format_sumstats(
path = eduAttainOkbayPth,
ref_genome = "GRCh37",
dbSNP = 144
)
} else {
reformatted <- format_sumstats(
path = eduAttainOkbayPth,
ref_genome = "GRCh37",
on_ref_genome = FALSE,
strand_ambig_filter = FALSE,
bi_allelic_filter = FALSE,
allele_flip_check = FALSE,
dbSNP=144
)
}
library(MungeSumstats)
is_32bit_windows <-
.Platform$OS.type == "windows" && .Platform$r_arch == "i386"
if (!is_32bit_windows) {
reformatted <- format_sumstats(
path = eduAttainOkbayPth,
ref_genome = "GRCh37",
dbSNP = 144
)
} else {
reformatted <- format_sumstats(
path = eduAttainOkbayPth,
ref_genome = "GRCh37",
on_ref_genome = FALSE,
strand_ambig_filter = FALSE,
bi_allelic_filter = FALSE,
allele_flip_check = FALSE,
dbSNP=144
)
}
install.packages("DelayedArray")
install.packages("DelayedArray")
install.packages("DelayedArray")
install.packages("DelayedArray")
install.packages("DelayedArray")
install.packages("DelayedArray")
install.packages("DelayedArray")
devtools::install_github("rondolab/MR-PRESSO")
library(MRPRESSO)
mvdat$exposure_beta
library(TwoSampleMR)
id_exp <- c("ieu-a-299","ieu-a-300","ieu-a-302")
#IEU中结局CVD的ID
id_out <- "ieu-a-7"
#三个暴露因素SNP提取，只要有一个强相关的SNP都提取
exp_dat <- mv_extract_exposures(id_exp)
#根据暴露的SNP，提取结局数据
out_dat <- extract_outcome_data(exp_dat$SNP, id_out)
mvdat <- mv_harmonise_data(exp_dat, out_dat)
#使用IVW进行合并分析
res <- mv_multiple(mvdat)
res
res_OR<-generate_odds_ratios(res$result)
res_OR
View(mvdat)
mvdat[["outcome_beta"]]
F.data <- format_mvmr(BXGs = mvdat$exposure_beta,
BYG = mvdat$outcome_beta,
seBXGs = mvdat$exposure_se,
seBYG = mvdat$outcome_se)
library(MVMR)
F.data <- format_mvmr(BXGs = mvdat$exposure_beta,
BYG = mvdat$outcome_beta,
seBXGs = mvdat$exposure_se,
seBYG = mvdat$outcome_se)
View(mvdat)
mvdat
View(mvdat)
mvdat[["exposure_beta"]]
F.data <- format_mvmr(BXGs = mvdat$exposure_beta,
BYG = mvdat$outcome_beta,
seBXGs = mvdat$exposure_se,
seBYG = mvdat$outcome_se,
RSID = mvdat[["exposure_beta"]][,1])
head(F.data)
View(F.data)
F.data <- format_mvmr(BXGs = mvdat$exposure_beta,
BYG = mvdat$outcome_beta,
seBXGs = mvdat$exposure_se,
seBYG = mvdat$outcome_se,
RSID = mvdat[["exposure_beta"]][,0])
mvdat[["exposure_beta"]][,1]
View(mvdat)
mvdat[["outcome_beta"]]
mvdat[["exposure_beta"]]
mvdat[["exposure_beta"]]
View(mvdat)
a<-mvdat$exposure_beta
View(a)
mvdat
mvdat
mvdat$exposure_beta
a<-data.frame(mvdat$exposure_beta)
a
str(a)
rownames(a)
a<-data.frame(mvdat$exposure_beta)
var_name <- rownames(a)
var_name
F.data <- format_mvmr(BXGs = mvdat$exposure_beta,
F.data <- format_mvmr(BXGs = mvdat$exposure_beta,
#计算snp的强度
F.data <- format_mvmr(BXGs = mvdat$exposure_beta,
BYG = mvdat$outcome_beta,
seBXGs = mvdat$exposure_se,
seBYG = mvdat$outcome_se,
RSID = var_name)
F.data <- format_mvmr(BXGs = mvdat$exposure_beta,
BYG = mvdat$outcome_beta,
seBXGs = mvdat$exposure_se,
seBYG = mvdat$outcome_se,
RSID = var_name)
F.data
sres <- strength_mvmr(r_input = F.data, gencov = 0)
#异质性检验
pres <- pleiotropy_mvmr(r_input = F.data, gencov = 0)
#合并分析
res <- ivw_mvmr(r_input = F.data)
library(TwoSampleMR)
exposure_dat <- extract_instruments(outcomes= "ukb-b-9942",p1=5e-08)
exposure_dat <- extract_instruments(outcomes= "ukb-b-9942",p1=5e-08)
exposure_dat <- extract_instruments(outcomes= "ukb-b-9942",p1=5e-08)
library(TwoSampleMR)
id_out <- "ieu-a-7"
#根据暴露的SNP，提取结局数据
out_dat <- extract_outcome_data(exp_dat$SNP, id_out)
out_dat <- extract_outcome_data(exp_dat$SNP, id_out)
write.csv(out_dat,file="out_dat.csv")
mvdat <- mv_harmonise_data(exp_dat, out_dat)
write.csv(mvdat,file="mvdat.csv")
res <- mv_multiple(mvdat)
res
res_OR<-generate_odds_ratios(res$result)
res_OR
library(MendelianRandomization)
View(mvdat)
mendedata <- mr_mvinput(bx = mvdat$exposure_beta, bxse = mvdat$exposure_se,
by = mvdat$outcome_beta, byse = mvdat$outcome_se,
correlation =matrix())
res_ivw<-mr_mvivw(mendedata)
res_ivw
res_ergger<-mr_mvegger(mendedata)
res_ergger
res_median<-mr_mvmedian(mendedata)
res_median
library(MVMR)
head(MVMR_dat)
MVMR_dat <- format_mvmr(BXGs = mvdat$exposure_beta,
BYG = mvdat$outcome_beta,
seBXGs = mvdat$exposure_se,
seBYG = mvdat$outcome_se,
RSID = rownames(mvdat$exposure_beta))
head(MVMR_dat)
F1 <- strength_mvmr(r_input = MVMR_dat, gencov = 0)
mv_hete2 <- pleiotropy_mvmr(r_input = MVMR_dat, gencov = 0)
getwd()
write.csv(exp_dat,file="exp_dat.csv")
mvdat <- mv_harmonise_data(exp_dat, out_dat)
write.csv(mvdat,file="mvdat.csv")
write.csv(mvdat,file="mvdat.csv")
exp(0.00025)
exp(0.000124)
exp(0.3)
library(ShinyBuilder, lib.loc = "D:/zstata/R-Portable/App/R-Portable/library")
detach("package:ShinyBuilder", unload = TRUE)
remove.packages("ShinyBuilder", lib="D:/zstata/R-Portable/App/R-Portable/library")
install.packages("weightthem")
install.packages("MatchThem")
suppressPackageStartupMessages(suppressWarnings({
library(gwasglue)
library(dplyr)
library(gassocplot)
library(coloc)
}))
library(tidyverse)
library(data.table)
library(car)# 异方差诊断
library(MASS)# 稳健回归
library(mgcv)# 提供洛伦兹曲线拟合 (样条函数等)
library(splines)# 拟合样条函数
library(broom)
library(ggplot2)
log1<-read.spss("D:/R/logistic.sav", to.data.frame = T)
library(foreign)
log1<-read.spss("D:/R/logistic.sav", to.data.frame = T)
shiny::runApp('C:/Users/56277/Desktop/N_S')
runApp('C:/Users/56277/Desktop/N_S')
devtools::build(path = "D:/zstata/electron-软件2 nhanes")
names(x1)<-c("two","three","five","seven","night","ten")
x1<-c(2,3,5,7,9,10)
names(x1)<-c("two","three","five","seven","night","ten")
x1
> x1[c("three","seven")]
x1[c("three","seven")]
> x1[-c("three","seven")]
x1[-c("three","seven")]
x1[!c("three","seven")]
x1[c("three","seven")]
x1[,!c("three","seven")]
x1[-c(3,7)]
x1<-c(2,3,5,7,9,10)
x1[-c(3,5)]
library(ggpubr)
install.packages("D:/BaiduNetdiskWorkspace/公众号/课程准备/第二期MR课程/代码/mateaf_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(mateaf)
View(exp_dat)
library(TwoSampleMR)
library(ieugwasr)
Sys.setenv(OPENGWAS_JWT="eyJhbGciOiJSUzI1NiIsImtpZCI6ImFwaS1qd3QiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhcGkub3Blbmd3YXMuaW8iLCJhdWQiOiJhcGkub3Blbmd3YXMuaW8iLCJzdWIiOiJjcnVjNjg2QDE2My5jb20iLCJpYXQiOjE3MjE4NzQ3MDIsImV4cCI6MTcyMzA4NDMwMn0.gWXRQY-l0J378d5VagPmD-X06mOl3A2Ob8YPzZdJBbVpjkla4grBN8zIQtLLUBE7S-f-law-61BrKmhLgC2tLe7cfHgSIl_2r3PXvUqwMQX9T0F1kSVb0qtPJ_oChJmRY1CnvGH8WzMgggl6o19PInC2JC7w4cMSr0H38FRhYH4Orik1gHK7tzx4FD2FrOC7sX80ViMf0XSzs4tTHfg9m3r-Ki1KmwfHSFvFJg413FsfREXx9ESqLhRpJMwNt5dwsu5YYgwLahWxoBNa6n_x7o0K3aza2VQkVUU5Zy0gB5jiXc3gf0nvDywbx00AkapA8t-NnVVN-Cyco3ij5JTLYg") #特别注意，这个token就是保存下来一长串的值，复制进去就可以了
exp_dat <- extract_instruments(outcomes="ieu-a-835")
out_dat <- extract_outcome_data(
snps = exp_dat$SNP,
outcomes = 'ukb-a-105'
)
dat <- harmonise_data(
exposure_dat =  exp_dat,
outcome_dat = out_dat,
action = 1
)
View(dat)
res<-mr(dat)
p1 <- mr_scatter_plot(res, dat)
p1[[1]]
res_single <- mr_singlesnp(dat)
p2 <- mr_forest_plot(res_single)
p2[[1]]
res_loo <- mr_leaveoneout(dat)
res_loo
p3 <- mr_leaveoneout_plot(res_loo)
p3[[1]]
p2 <- mr_forest_plot(res_single)
p2[[1]]
p3[[1]]
install.packages("D:/BaiduNetdiskWorkspace/公众号/shiny 平台/R包/zstats_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(zstats)
install.packages("DescTools")
library(DescTools)
View(a)
install.packages("coin")
library(coin)
benzos <- data.frame(
cerebellum = c( 3.41,  3.50,  2.85,  4.43,
4.04,  7.40,  5.63, 12.86,
6.03,  6.08,  5.75,  8.09,  7.56),
brainstem = c( 3.46,  2.73,  2.22,  3.16,
2.59,  4.18,  3.10,  4.49,
6.78,  7.54,  5.29,  4.57,  5.39),
cortex = c(10.52,  7.52,  4.57,  5.48,
7.16, 12.00,  9.36,  9.35,
11.54, 11.05,  9.92, 13.59, 13.21),
hypothalamus = c(19.51, 10.00,  8.27, 10.26,
11.43, 19.13, 14.03, 15.59,
24.87, 14.16, 22.68, 19.93, 29.32),
striatum = c( 6.98,  5.07,  3.57,  5.34,
4.57,  8.82,  5.76, 11.72,
6.98,  7.54,  7.66,  9.69,  8.09),
hippocampus = c(20.31, 13.20,  8.58, 11.42,
13.79, 23.71, 18.35, 38.52,
21.56, 18.66, 19.24, 27.39, 26.55),
treatment = factor(rep(c("Lorazepam", "Alprazolam", "Saline"),
c(4, 4, 5)))
)
independence_test(cerebellum + brainstem + cortex +
hypothalamus + striatum + hippocampus ~ treatment,
data = benzos,
teststat = "quadratic",
distribution = approximate(nresample = 10000),
ytrafo = function(data)
trafo(data, numeric_trafo = rank_trafo)) # Q = 16.129
install.packages("C:/Users/56277/Desktop/extraTrees-1.0.5.tar.gz", repos = NULL, type = "source")
remove.packages("foreign")
install.packages("D:/BaiduNetdiskWorkspace/公众号/shiny 平台/R包/zstats_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(zstats)
install.packages("RInno")
getwd()
create_app(app_name = "table", app_dir = "C:/Users/56277/Documents/table1")
library(RInno)
create_app(app_name = "table", app_dir = "C:/Users/56277/Documents/table1")
create_app(app_name = "table", app_dir = "C:/Users/56277/Documents/table1")
install.packages("RInno")
library(RInno)
create_app(app_name = "table", app_dir = "C:/Users/56277/Documents/table1")
library(zstats1)
install.packages("C:/Users/56277/Desktop/zstats1_0.0.0.9000.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/56277/Desktop/zstats1_0.0.0.9000.zip", repos = NULL, type = "win.binary")
library(zstats1)
getwd()
remove.packages("zstats1")
home
home()
version
R.home()
install.packages("C:/Users/56277/Desktop/zstats1_0.0.0.9000.zip", repos = NULL, type = "win.binary")
R.home()
install.packages("C:/Users/56277/Desktop/zstats1_0.0.0.9000.zip", repos = NULL, type = "win.binary")
library(zstats1)
library(zstats1)
library(zstats1)
library(zstats1)
zstats1::.med_cal()
.libPaths()
library(clusterProfiler)
library(org.Hs.eg.db)
library(org.Hs.eg.db)
library(org.Hs.eg.db)
library(clusterProfiler)
library(LDlinkR)
library(httr)
library(readxl)
library(dplyr)
.libPaths()
library(readxl)
install.packages("rlang")
library(rlang)
install.packages("rlang")
library(rlang)
library(rlang)
library(clusterProfiler)
library(org.Hs.eg.db)
library(Biobase)
install.packages("Biobase")
library(clusterProfiler)
# 安装所需的物种数据库注释文件
library(clusterProfiler)
library(clusterProfiler)
.libPaths()
library(vctrs, lib.loc = "C:/Program Files/R/R-4.4.2/library")
library(clusterProfiler)
library(RSQLite)
detach("package:RSQLite", unload = TRUE)
library(RSQLite, lib.loc = "C:/Program Files/R/R-4.4.2/library")
library(clusterProfiler)
library(Biobase)
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
install.packages("Biobase")
library(Biobase)
.libPaths()
library(Biobase)
library(Biobase)
library(Biobase)
library(Biobase, lib.loc = "C:/Program Files/R/R-4.4.2/library")
library(Biobase, lib.loc = "C:/Program Files/R/R-4.4.2/library")
BiocManager::install("Biobase")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("Biobase")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("Biobase")
install.packages("BiocManager")
install.packages("BiocManager")
.libPaths()
.libPaths()
install.packages("C:/Users/56277/Desktop/GBDtest3_0.0.0.9000.zip", repos = NULL, type = "win.binary")
.libPaths()
remove.packages("zstats")
devtools::install_github("Zstats/Zmed")
remove.packages("zstats")
devtools::install_github("Zstats/Med1")
devtools::install_github("Zstats/Med1")
install.packages("uuid")
devtools::install_github("Zstats/Med1")
devtools::install_github("Zstats/Med1")
devtools::install_github("Zstats/Med1")
devtools::install_github("Zstats/GBDtest")
devtools::install_github("Zstats/GBDtest")
remove.packages("GBDtest3")
install.packages("D:/BaiduNetdiskWorkspace/公众号/shiny平台/一机一码/GBDt18_0.0.0.9000.zip", repos = NULL, type = "win.binary")
remove.packages("GBDt18")
devtools::install_github("Zstats/GBDtest")
install.packages("D:/BaiduNetdiskWorkspace/公众号/shiny平台/一机一码/GBDt18_0.0.0.9000.zip", repos = NULL, type = "win.binary")
library(GBDt18)
install.packages("D:/BaiduNetdiskWorkspace/公众号/shiny平台/一机一码/ZGBD_0.1.5.zip", repos = NULL, type = "win.binary")
library(ZGBD)
install.packages("ggpmisc")
install.packages("ggpmisc")
library(ZGBD)
install.packages("ggsci")
library(ZGBD)
rm("ggpmisc")
remove.packages("ggpmisc")
devtools::build(binary = TRUE, args = c('--no-test-load'))
install.packages("D:/BaiduNetdiskWorkspace/公众号/shiny平台/一机一码/zstats1_0.0.0.9000.zip", repos = NULL, type = "win.binary")
library(zstats1)
install.packages("D:/BaiduNetdiskWorkspace/公众号/shiny平台/一机一码/zstats1_0.0.0.9000.zip", repos = NULL, type = "win.binary")
library(zstats1)
setwd("D:/BaiduNetdiskWorkspace/公众号/shiny平台/一机一码/一机一码R包-base")
devtools::build(binary = TRUE, args = c('--no-test-load'))
